{"version":3,"sources":["img/logo.png","img/example.jpg","serviceWorker.js","app.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","App","state","label","searchValue","file","example","fileUrl","changeLabel","e","preventDefault","setState","target","value","toUpperCase","changeSearchValue","uploadImage","reader","FileReader","files","onloadend","result","readAsDataURL","downloadImage","canvas","document","createElement","ctx","getContext","width","height","img","Image","src","onload","drawImage","fillStyle","fillRect","font","fillText","link","download","href","toDataURL","click","this","Fragment","Container","Logo","logo","Wrapper","InputWrapper","Input","placeholder","onChange","ImageWrapper","ImageBackground","Label","ButtonWrapper","UploadInput","style","display","accept","type","Button","onClick","React","Component","styled","div","input","button","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gGAAAA,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,qC,+GCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,82ECZC,IAAMC,EAAb,2MACEC,MAAQ,CACNC,MAAO,eACPC,YAAa,GACbC,KAAMC,IACNC,QAAS,MALb,EAQEC,YAAc,SAAAC,GACZA,EAAEC,iBACF,EAAKC,SAAS,CAAER,MAAOM,EAAEG,OAAOC,MAAMC,iBAV1C,EAaEC,kBAAoB,SAAAN,GAClBA,EAAEC,iBACF,EAAKC,SAAS,CAAEP,YAAaK,EAAEG,OAAOC,SAf1C,EAkBEG,YAAc,SAAAP,GACZA,EAAEC,iBAEF,IAAMO,EAAS,IAAIC,WACbb,EAAOI,EAAEG,OAAOO,MAAM,GAE5BF,EAAOG,UAAY,WACjB,EAAKT,SAAS,CACZN,KAAMA,EACNE,QAASU,EAAOI,UAIpBJ,EAAOK,cAAcjB,IA/BzB,EAkCEkB,cAAgB,WAAO,IAAD,EACa,EAAKrB,MAA9BG,EADY,EACZA,KAAME,EADM,EACNA,QAASJ,EADH,EACGA,MACjBqB,EAASC,SAASC,cAAc,UAChCC,EAAMH,EAAOI,WAAW,MAC9BJ,EAAOK,MAAQ,IACfL,EAAOM,OAAS,IAEhB,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,IAAM1B,GAAoBF,EAC9B0B,EAAIG,OAAS,WACXP,EAAIQ,UAAUJ,EAAK,EAAG,EAAGP,EAAOK,MAAOL,EAAOM,QAE9CH,EAAIS,UAAY,qBAChBT,EAAIU,SAAS,EAAG,IAAK,IAAK,IAE1BV,EAAIS,UAAY,QAChBT,EAAIW,KAAO,sBACXX,EAAIY,SAASpC,EAAO,GAAI,KAExB,IAAMqC,EAAOf,SAASC,cAAc,KACpCc,EAAKC,SAAW,gBAChBD,EAAKE,KAAOlB,EAAOmB,UAAU,aAC7BH,EAAKI,UAxDX,wEA4DY,IAAD,SACuCC,KAAK3C,MAA3CC,EADD,EACCA,MAAoBE,GADrB,EACQD,YADR,EACqBC,MAAME,EAD3B,EAC2BA,QAElC,OACE,kBAAC,IAAMuC,SAAP,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CAAMf,IAAKgB,MACX,kBAACC,EAAD,KACE,kBAACC,EAAD,KACE,kBAACC,EAAD,CACEvC,MAAOV,EACPkD,YAAY,gBACZC,SAAUT,KAAKrC,eAQnB,kBAAC+C,EAAD,KACGV,KAAK3C,MAAMK,QACV,kBAACiD,EAAD,CAAiBvB,IAAK1B,IAEtB,kBAACiD,EAAD,CAAiBvB,IAAK5B,IAExB,kBAACoD,EAAD,KAAQtD,IAEV,kBAACuD,EAAD,KACE,kBAACC,EAAD,cAEE,2BACEC,MAAO,CAAEC,QAAS,QAClBC,OAAO,UACPC,KAAK,OACLT,SAAU,SAAA7C,GAAC,OAAI,EAAKO,YAAYP,OAGpC,kBAACuD,EAAD,CAAQC,QAASpB,KAAKtB,eAAtB,oBAlGd,GAAyB2C,IAAMC,WA2GzBR,EAAcS,IAAOjE,MAAV,KAkBX4C,EAAYqB,IAAOC,IAAV,KAQTnB,EAAUkB,IAAOC,IAAV,KAEPrB,EAAOoB,IAAOrC,IAAV,KAIJoB,EAAeiB,IAAOC,IAAV,KAMZjB,EAAQgB,IAAOE,MAAV,KAgBLf,EAAea,IAAOC,IAAV,KAKZb,EAAkBY,IAAOrC,IAAV,KASf0B,EAAQW,IAAOC,IAAV,KAeLX,EAAgBU,IAAOC,IAAV,KAKbL,EAASI,IAAOG,OAAV,KCnMZC,IAASC,OAAO,kBAAC,EAAD,MAAShD,SAASiD,eAAe,SF6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aba4f440.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.c535fed7.png\";","module.exports = __webpack_public_path__ + \"static/media/example.9886ec40.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport logo from \"./img/logo.png\";\nimport example from \"./img/example.jpg\";\n\nexport class App extends React.Component {\n  state = {\n    label: \"EXPERIMENTAL\",\n    searchValue: \"\",\n    file: example,\n    fileUrl: null\n  };\n\n  changeLabel = e => {\n    e.preventDefault();\n    this.setState({ label: e.target.value.toUpperCase() });\n  };\n\n  changeSearchValue = e => {\n    e.preventDefault();\n    this.setState({ searchValue: e.target.value });\n  };\n\n  uploadImage = e => {\n    e.preventDefault();\n\n    const reader = new FileReader();\n    const file = e.target.files[0];\n\n    reader.onloadend = () => {\n      this.setState({\n        file: file,\n        fileUrl: reader.result\n      });\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  downloadImage = () => {\n    const { file, fileUrl, label } = this.state;\n    const canvas = document.createElement(\"canvas\");\n    const ctx = canvas.getContext(\"2d\");\n    canvas.width = 720;\n    canvas.height = 405;\n\n    const img = new Image();\n    img.src = fileUrl ? fileUrl : file;\n    img.onload = () => {\n      ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.5)\";\n      ctx.fillRect(0, 335, 720, 71);\n\n      ctx.fillStyle = \"white\";\n      ctx.font = \"bold 26px Helvetica\";\n      ctx.fillText(label, 16, 380);\n\n      const link = document.createElement(\"a\");\n      link.download = \"bass-wave.jpg\";\n      link.href = canvas.toDataURL(\"image/jpg\");\n      link.click();\n    };\n  };\n\n  render() {\n    const { label, searchValue, file, fileUrl } = this.state;\n\n    return (\n      <React.Fragment>\n        <Container>\n          <Logo src={logo} />\n          <Wrapper>\n            <InputWrapper>\n              <Input\n                value={label}\n                placeholder=\"Label name...\"\n                onChange={this.changeLabel}\n              />\n              {/* <Input\n                value={searchValue}\n                placeholder=\"Search on Unsplash...\"\n                onChange={this.changeSearchValue}\n              /> */}\n            </InputWrapper>\n            <ImageWrapper>\n              {this.state.fileUrl ? (\n                <ImageBackground src={fileUrl} />\n              ) : (\n                <ImageBackground src={file} />\n              )}\n              <Label>{label}</Label>\n            </ImageWrapper>\n            <ButtonWrapper>\n              <UploadInput>\n                Upload\n                <input\n                  style={{ display: \"none\" }}\n                  accept=\"image/*\"\n                  type=\"file\"\n                  onChange={e => this.uploadImage(e)}\n                />\n              </UploadInput>\n              <Button onClick={this.downloadImage}>Download</Button>\n            </ButtonWrapper>\n          </Wrapper>\n        </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nconst UploadInput = styled.label`\n  background: #69b4e6;\n  padding: 13px 32px;\n  border-radius: 10px;\n  border: 0;\n  color: white;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  outline: none;\n  transition: 0.1s ease;\n  cursor: pointer;\n\n  &:hover {\n    background: #5492bb;\n  }\n`;\n\nconst Container = styled.div`\n  width: 720px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin: 70px auto;\n`;\n\nconst Wrapper = styled.div``;\n\nconst Logo = styled.img`\n  background: gray;\n`;\n\nconst InputWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  padding-top: 60px;\n`;\n\nconst Input = styled.input`\n  width: 320px;\n  box-sizing: border-box;\n  padding: 10px 16px;\n  border: 1px solid #c0e1f6;\n  outline: none;\n  border-radius: 10px;\n  font-size: 18px;\n  font-family: \"Roboto\", sans-serif;\n  transition: 0.2s ease;\n\n  &:focus {\n    border: 1px solid #58a7dc;\n  }\n`;\n\nconst ImageWrapper = styled.div`\n  margin: 32px 0;\n  position: relative;\n`;\n\nconst ImageBackground = styled.img`\n  width: 720px;\n  height: 405px;\n  border: 0;\n  background-color: #69b4e6;\n  margin: 0;\n  padding: 0;\n`;\n\nconst Label = styled.div`\n  color: white;\n  font-size: 26px;\n  width: 720px;\n  box-sizing: border-box;\n  font-family: \"Helvetica\", sans-serif;\n  font-weight: 600;\n  text-transform: uppercase;\n  padding: 18px 16px;\n  position: absolute;\n  bottom: 4px;\n  left: 0;\n  background: rgba(0, 0, 0, 0.5);\n`;\n\nconst ButtonWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst Button = styled.button`\n  background: #69b4e6;\n  padding: 13px 32px;\n  border-radius: 10px;\n  border: 0;\n  color: white;\n  font-family: \"Roboto\", sans-serif;\n  font-weight: 600;\n  font-size: 20px;\n  outline: none;\n  transition: 0.1s ease;\n  cursor: pointer;\n\n  &:hover {\n    background: #5492bb;\n  }\n`;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport { App } from \"./app\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nserviceWorker.unregister();\n"],"sourceRoot":""}